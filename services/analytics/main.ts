import type { ReadonlyHeaders } from "next/dist/server/web/spec-extension/adapters/headers";

import { db } from "@/database/conn";
import { analyticsTable } from "@/database/schema";
import { timeStampGen } from "@/libs/global-utils";
import { errorLog } from "@/services/logger/error-logging";
import ConfigManager from '@/services/init';

const isBot = (userAgent: string): boolean => {
    const botPatterns = [
        /bot/i, /crawler/i, /spider/i, /crawling/i, /facebookexternalhit/i, /bingbot/i, /Googlebot/i,
        /Slurp/i, /DuckDuckBot/i, /Baiduspider/i, /YandexBot/i, /Sogou/i, /Exabot/i, /facebot/i,
        /ia_archiver/i
    ];
    return botPatterns.some(pattern => pattern.test(userAgent));
};

export const saveRequestHeaders = async (headers: ReadonlyHeaders, source: string): Promise<void> => {
    try {
        const configManager = await ConfigManager.getInstance();
        const settings = configManager.getSettings();

        if (!settings.analytics) {
            console.log(timeStampGen(), "Analytics are disabled in global settings.");
            return;
        }

        const userAgent = headers.get('user-agent') || 'unknown'
        const referer = headers.get('referer') || 'unknown';
        const ipAddress = headers.get('x-forwarded-for') || 'unknown'
        const userType = isBot(userAgent) ? 'bot' : 'human';

        await db.insert(analyticsTable).values({
            userAgent,
            referer,
            ipAddress,
            userType,
            source
        });

    } catch (err) {
        await errorLog("Warning", "saveAnalytics", "@/services/analytics/main.ts", err as Error);
        console.error(timeStampGen(), "Error in @/services/analytics/main.ts generated by func saveAnalytics, details: ", err);
    }
}